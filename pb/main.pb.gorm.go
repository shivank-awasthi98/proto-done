// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/main.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/main.proto

It has these top-level messages:
	MyMsg
*/
package pb

import context "context"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"

import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type MyMsgORM struct {
	CreatedAt *time.Time
	Id        uint64
	Msg1      string
	Msg2      string
	Msg3      string
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (MyMsgORM) TableName() string {
	return "my_msgs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *MyMsg) ToORM(ctx context.Context) (MyMsgORM, error) {
	to := MyMsgORM{}
	var err error
	if prehook, ok := interface{}(m).(MyMsgWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Msg1 = m.Msg1
	to.Msg2 = m.Msg2
	to.Msg3 = m.Msg3
	if m.CreatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreatedAt); err != nil {
			return to, err
		}
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.UpdatedAt); err != nil {
			return to, err
		}
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(MyMsgWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MyMsgORM) ToPB(ctx context.Context) (MyMsg, error) {
	to := MyMsg{}
	var err error
	if prehook, ok := interface{}(m).(MyMsgWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Msg1 = m.Msg1
	to.Msg2 = m.Msg2
	to.Msg3 = m.Msg3
	if m.CreatedAt != nil {
		if to.CreatedAt, err = ptypes1.TimestampProto(*m.CreatedAt); err != nil {
			return to, err
		}
	}
	if m.UpdatedAt != nil {
		if to.UpdatedAt, err = ptypes1.TimestampProto(*m.UpdatedAt); err != nil {
			return to, err
		}
	}
	if posthook, ok := interface{}(m).(MyMsgWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type MyMsg the arg will be the target, the caller the one being converted from

// MyMsgBeforeToORM called before default ToORM code
type MyMsgWithBeforeToORM interface {
	BeforeToORM(context.Context, *MyMsgORM) error
}

// MyMsgAfterToORM called after default ToORM code
type MyMsgWithAfterToORM interface {
	AfterToORM(context.Context, *MyMsgORM) error
}

// MyMsgBeforeToPB called before default ToPB code
type MyMsgWithBeforeToPB interface {
	BeforeToPB(context.Context, *MyMsg) error
}

// MyMsgAfterToPB called after default ToPB code
type MyMsgWithAfterToPB interface {
	AfterToPB(context.Context, *MyMsg) error
}

// DefaultCreateMyMsg executes a basic gorm create call
func DefaultCreateMyMsg(ctx context.Context, in *MyMsg, db *gorm1.DB) (*MyMsg, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MyMsgORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadMyMsg executes a basic gorm read call
func DefaultReadMyMsg(ctx context.Context, in *MyMsg, db *gorm1.DB) (*MyMsg, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &MyMsgORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MyMsgORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MyMsgORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MyMsgORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteMyMsg(ctx context.Context, in *MyMsg, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MyMsgORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MyMsgORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteMyMsgSet(ctx context.Context, in []*MyMsg, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MyMsgORM{})).(MyMsgORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MyMsgORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MyMsgORM{})).(MyMsgORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MyMsgORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*MyMsg, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*MyMsg, *gorm1.DB) error
}

// DefaultStrictUpdateMyMsg clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMyMsg(ctx context.Context, in *MyMsg, db *gorm1.DB) (*MyMsg, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMyMsg")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MyMsgORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MyMsgORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchMyMsg executes a basic gorm update call with patch behavior
func DefaultPatchMyMsg(ctx context.Context, in *MyMsg, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*MyMsg, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj MyMsg
	var err error
	if hook, ok := interface{}(&pbObj).(MyMsgWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMyMsg(ctx, &MyMsg{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MyMsgWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMyMsg(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MyMsgWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMyMsg(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MyMsgWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MyMsgWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *MyMsg, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *MyMsg, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *MyMsg, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *MyMsg, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetMyMsg executes a bulk gorm update call with patch behavior
func DefaultPatchSetMyMsg(ctx context.Context, objects []*MyMsg, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*MyMsg, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*MyMsg, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMyMsg(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMyMsg patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMyMsg(ctx context.Context, patchee *MyMsg, patcher *MyMsg, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*MyMsg, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Msg1" {
			patchee.Msg1 = patcher.Msg1
			continue
		}
		if f == prefix+"Msg2" {
			patchee.Msg2 = patcher.Msg2
			continue
		}
		if f == prefix+"Msg3" {
			patchee.Msg3 = patcher.Msg3
			continue
		}
		if f == prefix+"CreatedAt" {
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if f == prefix+"UpdatedAt" {
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMyMsg executes a gorm list call
func DefaultListMyMsg(ctx context.Context, db *gorm1.DB) ([]*MyMsg, error) {
	in := MyMsg{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &MyMsgORM{}, &MyMsg{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MyMsgORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MyMsgORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*MyMsg{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MyMsgORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MyMsgORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]MyMsgORM) error
}
